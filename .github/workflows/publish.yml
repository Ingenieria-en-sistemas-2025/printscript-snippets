name:  CI + Publish Docker image

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  ci:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      - name: Build (tests, detekt, spotless, etc.)
        run: ./gradlew --no-daemon clean build

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/reports/tests/test
            **/build/reports/jacoco/test/html
            **/build/reports/detekt
            **/build/reports/spotless

  publish:
    name: Build & Push Docker image
    needs: ci
    if: github.event_name == 'push' && (github.ref_name == 'dev' || github.ref_name == 'main')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create short SHA
        id: short-sha
        uses: benjlevesque/short-sha@v1.2
        with:
          length: 8

      - name: Docker Buildx # es el build moderno de docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Compute images and tags
        id: meta
        run: |
          IMAGE="ghcr.io/${GITHUB_REPOSITORY,,}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          
          {
            echo "tags<<EOF"
            echo "$IMAGE:${{ steps.short-sha.outputs.sha }}"
            if [ "${{ github.ref_name }}" = "main" ]; then
              echo "$IMAGE:latest"
            fi
            if [ "${{ github.ref_name }}" = "dev" ]; then
              echo "$IMAGE:dev-latest"
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false


  deploy:
    needs: publish
    if: github.event_name == 'push' && (github.ref_name == 'dev' || github.ref_name == 'main')
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DEV over SSH
        if: github.ref_name == 'dev'
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        with:
          host: ${{ secrets.VM_DEV_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_DEV_SSH_KEY }}
          script: |
            set -e
            cd ~/infrastructure
            git fetch --all
            git checkout dev || true
            git pull || true
            if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_PAT}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            docker network create printscript-net || true
            docker compose up -d --pull always
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"


      - name: Deploy to PROD over SSH
        if: github.ref_name == 'main'
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        with:
          host: ${{ secrets.VM_PROD_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_PROD_SSH_KEY }}
          script: |
            set -e
            cd ~/infrastructure
            git fetch --all
            git checkout main || true
            git pull || true
            if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_PAT}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            docker network create printscript-net || true
            docker compose up -d --pull always
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"